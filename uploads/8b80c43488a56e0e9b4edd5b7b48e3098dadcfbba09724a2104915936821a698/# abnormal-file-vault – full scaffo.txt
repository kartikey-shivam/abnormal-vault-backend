# abnormal-file-vault – full scaffold

Below is a production‑ready but concise skeleton that satisfies the assignment requirements.  
Copy all files exactly as shown, then run the setup commands at the end of this document.

---

## 📁 Repo tree
```text
abnormal-file-vault/
├─ docker-compose.yml
├─ .env.sample
├─ backend/
│  ├─ Dockerfile
│  ├─ requirements.txt
│  ├─ manage.py
│  ├─ abvault/            # Django project package
│  │  ├─ __init__.py
│  │  ├─ settings.py
│  │  ├─ urls.py
│  │  ├─ wsgi.py
│  │  └─ asgi.py
│  ├─ file_upload/        # Django app: domain logic (models, services)
│  │  ├─ __init__.py
│  │  ├─ admin.py
│  │  ├─ apps.py
│  │  ├─ migrations/
│  │  │  └─ __init__.py
│  │  ├─ models.py
│  │  ├─ services.py
│  │  └─ tests.py
│  └─ api/                # Django app: REST endpoints
│     ├─ __init__.py
│     ├─ apps.py
│     ├─ serializers.py
│     ├─ urls.py
│     ├─ views.py
│     └─ filters.py
├─ frontend/
│  ├─ Dockerfile
│  ├─ package.json
│  ├─ vite.config.js
│  └─ src/
│     ├─ main.jsx
│     ├─ App.jsx
│     ├─ api.jsx
│     ├─ context.jsx
│     ├─ components/
│     │  ├─ FileUpload.jsx
│     │  ├─ SearchFilters.jsx
│     │  └─ FileTable.jsx
│     └─ pages/
│        └─ Dashboard.jsx
└─ README.md
```

---

## docker-compose.yml
```yaml
version: "3.9"
services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
  backend:
    build: ./backend
    command: bash -c "python manage.py migrate && gunicorn abvault.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/code
      - upload-data:/code/uploads
    environment:
      DJANGO_SETTINGS_MODULE: abvault.settings
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
    depends_on:
      - db
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
    command: ["npm","run","dev","--","--host"]
    ports:
      - "5173:5173"
    depends_on:
      - backend
volumes:
  db-data:
  upload-data:
```

---

## .env.sample
```env
POSTGRES_DB=abvault
POSTGRES_USER=abvault
POSTGRES_PASSWORD=supersecret
```

---

# ⛳ BACKEND (Django)

### backend/Dockerfile
```Dockerfile
FROM python:3.11-slim
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
WORKDIR /code
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY backend .
```

### backend/requirements.txt
```
Django>=5.0,<6
djangorestframework>=3.15
psycopg2-binary
django-filter
```

### backend/abvault/settings.py (excerpt, trimmed)
```python
from pathlib import Path
import os
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = "insecure-override-in-.env-for-prod"
DEBUG = True
ALLOWED_HOSTS = ["*"]
INSTALLED_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "file_upload",
    "api",
]
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST", "db"),
        "PORT": 5432,
    }
}
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "uploads"
REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}
```

### backend/file_upload/models.py
```python
from django.contrib.auth import get_user_model
from django.db import models, transaction
import hashlib

User = get_user_model()

class FileAsset(models.Model):
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="files")
    file = models.FileField(upload_to="files/%Y/%m/%d")
    filename = models.CharField(max_length=255)
    size = models.PositiveBigIntegerField()
    content_type = models.CharField(max_length=120)
    checksum = models.CharField(max_length=64, db_index=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("checksum",)
        ordering = ["-uploaded_at"]

    def __str__(self):
        return self.filename

    @classmethod
    def compute_checksum(cls, f) -> str:
        sha = hashlib.sha256()
        for chunk in f.chunks():
            sha.update(chunk)
        f.seek(0)
        return sha.hexdigest()
```

### backend/file_upload/services.py
```python
from django.db import IntegrityError
from .models import FileAsset


def save_file(owner, django_file):
    """Save file with deduplication (OOP service)."""
    checksum = FileAsset.compute_checksum(django_file)
    try:
        with transaction.atomic():
            asset, created = FileAsset.objects.get_or_create(
                checksum=checksum,
                defaults={
                    "owner": owner,
                    "file": django_file,
                    "filename": django_file.name,
                    "size": django_file.size,
                    "content_type": django_file.content_type or "application/octet-stream",
                },
            )
            # If file already existed, but belongs to different user, just add ownership record
            if not created and asset.owner_id != owner.id:
                # in real app create link table (User‑<many‑to‑many>‑FileAsset)
                asset.owner = owner
                asset.save(update_fields=["owner"])
            return asset
    except IntegrityError:
        # Rare race condition: re‑fetch
        return FileAsset.objects.get(checksum=checksum)
```

### backend/api/serializers.py
```python
from rest_framework import serializers
from file_upload.models import FileAsset

class FileAssetSerializer(serializers.ModelSerializer):
    class Meta:
        model = FileAsset
        fields = (
            "id",
            "filename",
            "size",
            "content_type",
            "uploaded_at",
        )
```

### backend/api/filters.py
```python
import django_filters as df
from file_upload.models import FileAsset

class FileAssetFilter(df.FilterSet):
    min_size = df.NumberFilter(field_name="size", lookup_expr="gte")
    max_size = df.NumberFilter(field_name="size", lookup_expr="lte")
    start_date = df.DateTimeFilter(field_name="uploaded_at", lookup_expr="gte")
    end_date = df.DateTimeFilter(field_name="uploaded_at", lookup_expr="lte")

    class Meta:
        model = FileAsset
        fields = ["filename", "content_type"]
```

### backend/api/views.py
```python
from rest_framework import viewsets, status
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response

from .serializers import FileAssetSerializer
from .filters import FileAssetFilter
from file_upload import services
from file_upload.models import FileAsset

class FileAssetViewSet(viewsets.ModelViewSet):
    queryset = FileAsset.objects.all()
    serializer_class = FileAssetSerializer
    permission_classes = [IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser]
    filterset_class = FileAssetFilter

    def perform_create(self, serializer):
        # Not used – we override create()
        pass

    def create(self, request, *args, **kwargs):
        if "file" not in request.data:
            return Response({"detail": "file required"}, status=status.HTTP_400_BAD_REQUEST)
        asset = services.save_file(request.user, request.data["file"])
        return Response(self.get_serializer(asset).data, status=status.HTTP_201_CREATED)
```

### backend/api/urls.py
```python
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import FileAssetViewSet

router = DefaultRouter()
router.register(r"files", FileAssetViewSet, basename="fileasset")

urlpatterns = [
    path("", include(router.urls)),
]
```

### backend/abvault/urls.py
```python
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/", include("api.urls")),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

---

# 🌐 FRONTEND (React + Vite)

### frontend/Dockerfile
```Dockerfile
FROM node:20-alpine as deps
WORKDIR /app
COPY frontend/package.json ./
RUN npm install
COPY frontend .
CMD ["npm","run","dev","--","--host","0.0.0.0"]
```

### frontend/package.json (excerpt)
```json
{
  "name": "abvault-front",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.6.0",
    "react": "^18.3.0",
    "react-dom": "^18.3.0",
    "react-router-dom": "^6.22.2"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.4",
    "vite": "^5.1.4"
  }
}
```

### frontend/vite.config.js
```js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
export default defineConfig({
  plugins: [react()],
  server: { port: 5173, host: true },
});
```

### frontend/src/api.jsx
```jsx
import axios from "axios";
const api = axios.create({ baseURL: "/api" });
export default api;
```

### frontend/src/context.jsx (simple global refresh trigger)
```jsx
import { createContext, useState } from "react";
export const RefreshCtx = createContext(() => {});
export default function RefreshProvider({ children }) {
  const [tick, setTick] = useState(0);
  return (
    <RefreshCtx.Provider value={() => setTick((t) => t + 1)} key={tick}>
      {children}
    </RefreshCtx.Provider>
  );
}
```

### frontend/src/components/FileUpload.jsx
```jsx
import { useRef } from "react";
import api from "../api";
import { useContext } from "react";
import { RefreshCtx } from "../context";

export default function FileUpload() {
  const inputRef = useRef();
  const refresh = useContext(RefreshCtx);
  const handleUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const form = new FormData();
    form.append("file", file);
    await api.post("/files/", form, { headers: { "Content-Type": "multipart/form-data" } });
    refresh();
  };
  return <input type="file" ref={inputRef} onChange={handleUpload} />;
}
```

### frontend/src/components/SearchFilters.jsx
```jsx
import { useState } from "react";

export default function SearchFilters({ onChange }) {
  const [name, setName] = useState("");
  const [type, setType] = useState("");
  return (
    <div style={{ display: "flex", gap: "1rem", margin: "1rem 0" }}>
      <input placeholder="name" value={name} onChange={(e) => setName(e.target.value)} />
      <input placeholder="content type" value={type} onChange={(e) => setType(e.target.value)} />
      <button onClick={() => onChange({ filename: name, content_type: type })}>filter</button>
    </div>
  );
}
```

### frontend/src/components/FileTable.jsx
```jsx
export default function FileTable({ data }) {
  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Type</th>
          <th>Size</th>
          <th>Uploaded</th>
        </tr>
      </thead>
      <tbody>
        {data.map((f) => (
          <tr key={f.id}>
            <td>{f.filename}</td>
            <td>{f.content_type}</td>
            <td>{(f.size / 1024).toFixed(1)} KB</td>
            <td>{new Date(f.uploaded_at).toLocaleString()}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}
```

### frontend/src/pages/Dashboard.jsx
```jsx
import { useEffect, useState } from "react";
import api from "../api";
import FileUpload from "../components/FileUpload";
import SearchFilters from "../components/SearchFilters";
import FileTable from "../components/FileTable";

export default function Dashboard() {
  const [files, setFiles] = useState([]);
  const fetchFiles = async (params = {}) => {
    const { data } = await api.get("/files/", { params });
    setFiles(data);
  };
  useEffect(() => {
    fetchFiles();
  }, []);
  return (
    <div style={{ padding: "2rem" }}>
      <h1>File Vault</h1>
      <FileUpload />
      <SearchFilters onChange={fetchFiles} />
      <FileTable data={files} />
    </div>
  );
}
```

### frontend/src/App.jsx
```jsx
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Dashboard from "./pages/Dashboard";
import RefreshProvider from "./context";

export default function App() {
  return (
    <BrowserRouter>
      <RefreshProvider>
        <Routes>
          <Route path="/" element={<Dashboard />} />
        </Routes>
      </RefreshProvider>
    </BrowserRouter>
  );
}
```

### frontend/src/main.jsx
```jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

---

## README.md (excerpt)
```markdown
# Abnormal File Vault 🗄️

A minimal secure file‑hosting service (React + Django + Docker). Supports server‑side deduplication and rich search filters.

## 1️⃣ Quick Start
```bash
cp .env.sample .env
# edit secrets if desired

# build & run all services
docker-compose up --build
```
Open http://localhost:5173 for UI, http://localhost:8000/api/files/ for API.

## 2️⃣ Backend Admin & Auth
Create a superuser inside the backend container:
```bash
docker-compose exec backend python manage.py createsuperuser
```
Then log in at http://localhost:8000/admin and obtain an auth token or use session auth.

## 3️⃣ How Deduplication Works
1. Incoming upload -> SHA‑256 checksum streaming (constant memory).
2. `FileAsset.objects.get_or_create(checksum=hash)` guarantees single copy (unique constraint).
3. Race conditions handled with DB transaction + fallback re‑fetch.

## 4️⃣ Search/Filtering
All list queries accept query params:
- `filename` (icontains)
- `content_type`
- `min_size`, `max_size` (bytes)
- `start_date`, `end_date` (ISO 8601)

Example:
```
GET /api/files/?min_size=1000&content_type=application%2Fpdf
```
